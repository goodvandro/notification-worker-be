import { Inject, Injectable, Logger, OnModuleDestroy } from '@nestjs/common';
import { ClientProxy } from '@nestjs/microservices';

@Injectable()
export class RabbitMqService implements OnModuleDestroy {
  private readonly logger = new Logger(RabbitMqService.name);

  constructor(@Inject('MESSAGES_RMQ_CLIENT') private readonly client: ClientProxy) {}

  /**
   * Publica uma mensagem (job) na fila "messages" do RabbitMQ.
   * O padr√£o do Nest √©: client.emit(pattern, payload) para fire‚Äêand‚Äêforget.
   */
  async publishMessage(messageId: string): Promise<void> {
    // For√ßa conex√£o caso ainda n√£o esteja pronta:
    try {
      this.logger.log(`üì§ Publicando mensagem: ${messageId}`);

      await this.client.emit('process_message_queue', { messageId }).toPromise();

      this.logger.log(`‚úÖ Mensagem publicada: ${messageId}`);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao publicar: ${messageId}`, error);
      throw error;
    }
  }

  async onModuleDestroy() {
    try {
      await this.client.close();
      this.logger.log('üîå Cliente RabbitMQ desconectado');
    } catch (error) {
      this.logger.error('Erro ao fechar conex√£o RabbitMQ:', error);
    }
  }
}
